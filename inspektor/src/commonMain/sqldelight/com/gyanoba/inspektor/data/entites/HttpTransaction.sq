import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE HttpTransaction (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    method TEXT NOT NULL,
    statusCode INTEGER,
    requestDate INTEGER AS Instant NOT NULL,
    responseDate INTEGER AS Instant,
    tookMs INTEGER,
    protocol TEXT,
    url TEXT,
    host TEXT,
    path TEXT,
    scheme TEXT,
    responseTlsVersion TEXT DEFAULT NULL,
    responseCipherSuite TEXT DEFAULT NULL,
    requestPayloadSize INTEGER,
    requestContentType TEXT,
    requestHeaders TEXT,
    requestHeadersSize INTEGER,
    requestBody TEXT,
    isRequestBodyEncoded INTEGER AS Boolean DEFAULT 0,
    responseCode INTEGER,
    responseMessage TEXT,
    error TEXT,
    responsePayloadSize INTEGER,
    responseContentType TEXT,
    responseHeaders TEXT,
    responseHeadersSize INTEGER,
    responseBody TEXT,
    isResponseBodyEncoded INTEGER AS Boolean DEFAULT 0
);

CREATE INDEX HttpTransaction_method ON HttpTransaction(method);
CREATE INDEX HttpTransaction_statusCode ON HttpTransaction(statusCode);
CREATE INDEX HttpTransaction_host ON HttpTransaction(host);


getById:
SELECT * FROM HttpTransaction WHERE id = ?;

getAll:
SELECT * FROM HttpTransaction;

getAllLatest:
SELECT * FROM HttpTransaction ORDER BY requestDate DESC;

getAllCount:
SELECT COUNT(*) FROM HttpTransaction;

getAllLatestForDateRange:
SELECT * FROM HttpTransaction WHERE requestDate BETWEEN :startDate AND :endDate ORDER BY requestDate DESC;

insert:
INSERT INTO HttpTransaction(
   method,
   statusCode,
   requestDate,
   responseDate,
   tookMs,
   protocol,
   url,
   host,
   path,
   scheme,
   responseTlsVersion,
   responseCipherSuite,
   requestPayloadSize,
   requestContentType,
   requestHeaders,
   requestHeadersSize,
   requestBody,
   isRequestBodyEncoded,
   responseCode,
   responseMessage,
   error,
   responsePayloadSize,
   responseContentType,
   responseHeaders,
   responseHeadersSize,
   responseBody,
   isResponseBodyEncoded
)
VALUES ?;

delete:
DELETE FROM HttpTransaction WHERE id = ?;

deleteAll:
DELETE FROM HttpTransaction;

deleteBefore:
DELETE FROM HttpTransaction WHERE requestDate < ?;

update:
UPDATE HttpTransaction
SET responseCode = ?,
    responseMessage = ?,
    responsePayloadSize = ?,
    responseContentType = ?,
    responseHeaders = ?,
    responseHeadersSize = ?,
    responseBody = ?,
    isResponseBodyEncoded = ?
WHERE id = :id;

lastInsertRowId:
SELECT last_insert_rowid();