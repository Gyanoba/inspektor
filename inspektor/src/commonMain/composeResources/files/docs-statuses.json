{
  "100": {
    "name": "100 Continue",
    "mdnSlug": "Web/HTTP/Status/100",
    "summary": "The HTTP 100 Continue informational status response code indicates that everything so far is OK and that the client should continue with the request or ignore it if it is already finished."
  },
  "101": {
    "name": "101 Switching Protocols",
    "mdnSlug": "Web/HTTP/Status/101",
    "summary": "The HTTP 101 Switching Protocols response code indicates the protocol the server is switching to as requested by a client which sent the message including the Upgrade request header."
  },
  "103": {
    "name": "103 Early Hints",
    "mdnSlug": "Web/HTTP/Status/103",
    "summary": "The HTTP 103 Early Hints information response status code is primarily intended to be used with the Link header to allow the user agent to start preloading resources while the server is still preparing a response."
  },
  "200": {
    "name": "200 OK",
    "mdnSlug": "Web/HTTP/Status/200",
    "summary": "The HTTP 200 OK success status response code indicates that the request has succeeded. A 200 response is cacheable by default."
  },
  "201": {
    "name": "201 Created",
    "mdnSlug": "Web/HTTP/Status/201",
    "summary": "The HTTP 201 Created success status response code indicates that the request has succeeded and has led to the creation of a resource. The new resource is effectively created before this response is sent back and the new resource is returned in the body of the message, its location being either the URL of the request, or the content of the Location header."
  },
  "202": {
    "name": "202 Accepted",
    "mdnSlug": "Web/HTTP/Status/202",
    "summary": "The HTTP 202 Accepted response status code indicates that the request has been accepted for processing, but the processing has not been completed; in fact, processing may not have started yet. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place."
  },
  "203": {
    "name": "203 Non-Authoritative Information",
    "mdnSlug": "Web/HTTP/Status/203",
    "summary": "The HTTP 203 Non-Authoritative Information response status indicates that the request was successful but the enclosed payload has been modified by a transforming proxy from that of the origin server's 200 (OK) response ."
  },
  "204": {
    "name": "204 No Content",
    "mdnSlug": "Web/HTTP/Status/204",
    "summary": "The HTTP 204 No Content success status response code indicates that the request has succeeded, but that the client doesn't need to go away from its current page. A 204 response is cacheable by default. An ETag header is included in such a response."
  },
  "205": {
    "name": "205 Reset Content",
    "mdnSlug": "Web/HTTP/Status/205",
    "summary": "The HTTP 205 Reset Content response status tells the client to reset the document view, so for example to clear the content of a form, reset a canvas state, or to refresh the UI."
  },
  "206": {
    "name": "206 Partial Content",
    "mdnSlug": "Web/HTTP/Status/206",
    "summary": "The HTTP 206 Partial Content success status response code indicates that the request has succeeded and has the body contains the requested ranges of data, as described in the Range header of the request."
  },
  "300": {
    "name": "300 Multiple Choices",
    "mdnSlug": "Web/HTTP/Status/300",
    "summary": "The HTTP 300 Multiple Choices redirect status response code indicates that the request has more than one possible responses. The user-agent or the user should choose one of them. As there is no standardized way of choosing one of the responses, this response code is very rarely used."
  },
  "301": {
    "name": "301 Moved Permanently",
    "mdnSlug": "Web/HTTP/Status/301",
    "summary": "The HTTP 301 Moved Permanently redirect status response code indicates that the resource requested has been definitively moved to the URL given by the Location headers. A browser redirects to this page and search engines update their links to the resource (in 'SEO-speak', it is said that the 'link-juice' is sent to the new URL)."
  },
  "302": {
    "name": "302 Found",
    "mdnSlug": "Web/HTTP/Status/302",
    "summary": "The HTTP 302 Found redirect status response code indicates that the resource requested has been temporarily moved to the URL given by the Location header. A browser redirects to this page but search engines don't update their links to the resource (in 'SEO-speak', it is said that the 'link-juice' is not sent to the new URL)."
  },
  "303": {
    "name": "303 See Other",
    "mdnSlug": "Web/HTTP/Status/303",
    "summary": "The HTTP 303 See Other redirect status response code indicates that the redirects don't link to the newly uploaded resources, but to another page (such as a confirmation page or an upload progress page). This response code is usually sent back as a result of PUT or POST. The method used to display this redirected page is always GET."
  },
  "304": {
    "name": "304 Not Modified",
    "mdnSlug": "Web/HTTP/Status/304",
    "summary": "The HTTP 304 Not Modified client redirection response code indicates that there is no need to retransmit the requested resources. It is an implicit redirection to a cached resource. This happens when the request method is safe, like a GET or a HEAD request, or when the request is conditional and uses a If-None-Match or a If-Modified-Since header."
  },
  "307": {
    "name": "307 Temporary Redirect",
    "mdnSlug": "Web/HTTP/Status/307",
    "summary": "The method and the body of the original request are reused to perform the redirected request. In the cases where you want the method used to be changed to GET, use 303 See Other instead. This is useful when you want to give an answer to a PUT method that is not the uploaded resources, but a confirmation message (like \"You successfully uploaded XYZ\")."
  },
  "308": {
    "name": "308 Permanent Redirect",
    "mdnSlug": "Web/HTTP/Status/308",
    "summary": "The request method and the body will not be altered, whereas 301 may incorrectly sometimes be changed to a GET method."
  },
  "400": {
    "name": "400 Bad Request",
    "mdnSlug": "Web/HTTP/Status/400",
    "summary": "The HTTP 400 Bad Request response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."
  },
  "401": {
    "name": "401 Unauthorized",
    "mdnSlug": "Web/HTTP/Status/401",
    "summary": "The HTTP 401 Unauthorized client error status response code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource."
  },
  "402": {
    "name": "402 Payment Required",
    "mdnSlug": "Web/HTTP/Status/402",
    "summary": "The HTTP 402 Payment Required is a nonstandard client error status response code that is reserved for future use."
  },
  "403": {
    "name": "403 Forbidden",
    "mdnSlug": "Web/HTTP/Status/403",
    "summary": "The HTTP 403 Forbidden client error status response code indicates that the server understood the request but refuses to authorize it."
  },
  "404": {
    "name": "404 Not Found",
    "mdnSlug": "Web/HTTP/Status/404",
    "summary": "The HTTP 404 Not Found client error response code indicates that the server can't find the requested resource. Links that lead to a 404 page are often called broken or dead links and can be subject to link rot."
  },
  "405": {
    "name": "405 Method Not Allowed",
    "mdnSlug": "Web/HTTP/Status/405",
    "summary": "The HTTP 405 Method Not Allowed response status code indicates that the request method is known by the server but is not supported by the target resource."
  },
  "406": {
    "name": "406 Not Acceptable",
    "mdnSlug": "Web/HTTP/Status/406",
    "summary": "The HTTP 406 Not Acceptable client error response code indicates that the server cannot produce a response matching the list of acceptable values defined in the request's proactive content negotiation headers, and that the server is unwilling to supply a default representation."
  },
  "407": {
    "name": "407 Proxy Authentication Required",
    "mdnSlug": "Web/HTTP/Status/407",
    "summary": "The HTTP 407 Proxy Authentication Required  client error status response code indicates that the request has not been applied because it lacks valid authentication credentials for a proxy server that is between the browser and the server that can access the requested resource."
  },
  "408": {
    "name": "408 Request Timeout",
    "mdnSlug": "Web/HTTP/Status/408",
    "summary": "The HTTP 408 Request Timeout response status code means that the server would like to shut down this unused connection. It is sent on an idle connection by some servers, even without any previous request by the client."
  },
  "409": {
    "name": "409 Conflict",
    "mdnSlug": "Web/HTTP/Status/409",
    "summary": "The HTTP 409 Conflict response status code indicates a request conflict with current state of the target resource."
  },
  "410": {
    "name": "410 Gone",
    "mdnSlug": "Web/HTTP/Status/410",
    "summary": "The HTTP 410 Gone client error response code indicates that access to the target resource is no longer available at the origin server and that this condition is likely to be permanent."
  },
  "411": {
    "name": "411 Length Required",
    "mdnSlug": "Web/HTTP/Status/411",
    "summary": "The HTTP 411 Length Required client error response code indicates that the server refuses to accept the request without a defined Content-Length header."
  },
  "412": {
    "name": "412 Precondition Failed",
    "mdnSlug": "Web/HTTP/Status/412",
    "summary": "The HTTP 412 Precondition Failed client error response code indicates that access to the target resource has been denied. This happens with conditional requests on methods other than GET or HEAD when the condition defined by the If-Unmodified-Since or If-None-Match headers is not fulfilled. In that case, the request, usually an upload or a modification of a resource, cannot be made and this error response is sent back."
  },
  "413": {
    "name": "413 Payload Too Large",
    "mdnSlug": "Web/HTTP/Status/413",
    "summary": "The HTTP 413 Payload Too Large response status code indicates that the request entity is larger than limits defined by server; the server might close the connection or return a Retry-After header field."
  },
  "414": {
    "name": "414 URI Too Long",
    "mdnSlug": "Web/HTTP/Status/414",
    "summary": "The HTTP 414 URI Too Long response status code indicates that the URI requested by the client is longer than the server is willing to interpret."
  },
  "415": {
    "name": "415 Unsupported Media Type",
    "mdnSlug": "Web/HTTP/Status/415",
    "summary": "The HTTP 415 Unsupported Media Type client error response code indicates that the server refuses to accept the request because the payload format is in an unsupported format."
  },
  "416": {
    "name": "416 Range Not Satisfiable",
    "mdnSlug": "Web/HTTP/Status/416",
    "summary": "The HTTP 416 Range Not Satisfiable error response code indicates that a server cannot serve the requested ranges. The most likely reason is that the document doesn't contain such ranges, or that the Range header value, though syntactically correct, doesn't make sense."
  },
  "417": {
    "name": "417 Expectation Failed",
    "mdnSlug": "Web/HTTP/Status/417",
    "summary": "The HTTP 417 Expectation Failed client error response code indicates that the expectation given in the request's Expect header could not be met."
  },
  "418": {
    "name": "418 I'm a teapot",
    "mdnSlug": "Web/HTTP/Status/418",
    "summary": "The HTTP 418 I'm a teapot client error response code indicates that the server refuses to brew coffee because it is, permanently, a teapot. A combined coffee/tea pot that is temporarily out of coffee should instead return 503. This error is a reference to Hyper Text Coffee Pot Control Protocol defined in April Fools' jokes in 1998 and 2014."
  },
  "422": {
    "name": "422 Unprocessable Entity",
    "mdnSlug": "Web/HTTP/Status/422",
    "summary": "The HTTP 422 Unprocessable Entity response status code indicates that the server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions."
  },
  "425": {
    "name": "425 Too Early",
    "mdnSlug": "Web/HTTP/Status/425",
    "summary": "The HTTP 425 Too Early response status code indicates that the server is unwilling to risk processing a request that might be replayed, which creates the potential for a replay attack."
  },
  "426": {
    "name": "426 Upgrade Required",
    "mdnSlug": "Web/HTTP/Status/426",
    "summary": "The HTTP 426 Upgrade Required client error response code indicates that the server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol."
  },
  "428": {
    "name": "428 Precondition Required",
    "mdnSlug": "Web/HTTP/Status/428",
    "summary": "The HTTP 428 Precondition Required response status code indicates that the server requires the request to be conditional."
  },
  "429": {
    "name": "429 Too Many Requests",
    "mdnSlug": "Web/HTTP/Status/429",
    "summary": "The HTTP 429 Too Many Requests response status code indicates the user has sent too many requests in a given amount of time (\"rate limiting\")."
  },
  "431": {
    "name": "431 Request Header Fields Too Large",
    "mdnSlug": "Web/HTTP/Status/431",
    "summary": "The HTTP 431 Request Header Fields Too Large response status code indicates that the server refuses to process the request because the request’s HTTP headers are too long."
  },
  "451": {
    "name": "451 Unavailable For Legal Reasons",
    "mdnSlug": "Web/HTTP/Status/451",
    "summary": "The HTTP 451 Unavailable For Legal Reasons client error response code indicates that the user requested a resource that is not available due to legal reasons, such as a web page for which a legal action has been issued."
  },
  "500": {
    "name": "500 Internal Server Error",
    "mdnSlug": "Web/HTTP/Status/500",
    "summary": "The HTTP 500 Internal Server Error server error response code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request."
  },
  "501": {
    "name": "501 Not Implemented",
    "mdnSlug": "Web/HTTP/Status/501",
    "summary": "The HTTP 501 Not Implemented server error response code means that the server does not support the functionality required to fulfill the request."
  },
  "502": {
    "name": "502 Bad Gateway",
    "mdnSlug": "Web/HTTP/Status/502",
    "summary": "The HTTP 502 Bad Gateway server error response code indicates that the server, while acting as a gateway or proxy, received an invalid response from the upstream server."
  },
  "503": {
    "name": "503 Service Unavailable",
    "mdnSlug": "Web/HTTP/Status/503",
    "summary": "The HTTP 503 Service Unavailable server error response code indicates that the server is not ready to handle the request."
  },
  "504": {
    "name": "504 Gateway Timeout",
    "mdnSlug": "Web/HTTP/Status/504",
    "summary": "The HTTP 504 Gateway Timeout server error response code indicates that the server, while acting as a gateway or proxy, did not get a response in time from the upstream server that it needed in order to complete the request."
  },
  "505": {
    "name": "505 HTTP Version Not Supported",
    "mdnSlug": "Web/HTTP/Status/505",
    "summary": "The HTTP 505 HTTP Version Not Supported response status code indicates that the HTTP version used in the request is not supported by the server."
  },
  "506": {
    "name": "506 Variant Also Negotiates",
    "mdnSlug": "Web/HTTP/Status/506",
    "summary": "The HTTP 506 Variant Also Negotiates response status code may be given in the context of Transparent Content Negotiation (see RFC 2295). This protocol enables a client to retrieve the best variant of a given resource, where the server supports multiple variants."
  },
  "507": {
    "name": "507 Insufficient Storage",
    "mdnSlug": "Web/HTTP/Status/507",
    "summary": "The HTTP 507 Insufficient Storage response status code may be given in the context of the Web Distributed Authoring and Versioning (WebDAV) protocol (see RFC 4918)."
  },
  "508": {
    "name": "508 Loop Detected",
    "mdnSlug": "Web/HTTP/Status/508",
    "summary": "The HTTP 508 Loop Detected response status code may be given in the context of the Web Distributed Authoring and Versioning (WebDAV) protocol."
  },
  "510": {
    "name": "510 Not Extended",
    "mdnSlug": "Web/HTTP/Status/510",
    "summary": "The HTTP  510 Not Extended response status code is sent in the context of the HTTP Extension Framework, defined in RFC 2774."
  },
  "511": {
    "name": "511 Network Authentication Required",
    "mdnSlug": "Web/HTTP/Status/511",
    "summary": "The HTTP 511 Network Authentication Required response status code indicates that the client needs to authenticate to gain network access."
  }
}